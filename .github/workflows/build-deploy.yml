name: Build and Deploy

on:
  push:
    branches: [ feature/cicd ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_NAME }}
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Set version tag
        id: tag
        run: echo "version=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_NAME }}/letsgo-frontend:${{ steps.tag.outputs.version }}
          cache-from: |
            type=registry,ref=${{ secrets.DOCKERHUB_NAME }}/letsgo-frontend:buildcache
            type=registry,ref=${{ secrets.DOCKERHUB_NAME }}/letsgo-frontend:latest
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_NAME }}/letsgo-frontend:buildcache,mode=max

      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_NAME }}/letsgo-backend:${{ steps.tag.outputs.version }}
          cache-from: |
            type=registry,ref=${{ secrets.DOCKERHUB_NAME }}/letsgo-backend:buildcache
            type=registry,ref=${{ secrets.DOCKERHUB_NAME }}/letsgo-backend:latest
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_NAME }}/letsgo-backend:buildcache,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to Digital Ocean
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          command_timeout: "10m"
          script: |
            #!/bin/bash
            set -e
            echo "Starting deployment..."
            
            # Check disk space
            if [ $(df -h / | awk 'NR==2 {print $5}' | sed 's/%//') -gt 90 ]; then
              echo "❌ Low disk space, aborting deployment"
              exit 1
            fi
            
            cd /root/git/server || { echo "❌ Directory does not exist"; exit 1; }
            if [ -f docker-compose.prod.yml ]; then
              cp docker-compose.prod.yml docker-compose.prod.yml.backup
              docker compose -f docker-compose.prod.yml config | grep "image:" | awk '{print $2}' > current_images.txt
            fi
            
            echo "Pulling changes..."
            git pull origin feature/cicd || { echo "❌ Git pull failed"; exit 1; }
            
            echo "Setting envs..."
            CURRENT_SHA=$(git rev-parse --short HEAD)
            if [ ! -f .env ]; then
              echo "❌ .env not found."
              exit 1
            fi
            sed -i '/^TAG=/d' .env
            echo "TAG=$CURRENT_SHA" >> .env
            
            echo "Pulling images..."
            docker compose -f docker-compose.prod.yml pull || { echo "❌ Docker compose pull failed"; exit 1; }
            
            echo "Docker composing..."
            docker compose -f docker-compose.prod.yml up -d --remove-orphans || { 
              echo "❌ Deployment failed, rolling back..."
              if [ -f docker-compose.prod.yml.backup ]; then
                mv docker-compose.prod.yml.backup docker-compose.prod.yml
                docker compose -f docker-compose.prod.yml up -d --remove-orphans
              fi
              exit 1
            }
            
            echo "Performing health check..."
            for i in {1..5}; do
              if curl -f http://localhost/health && curl -f http://localhost/api/health; then
                echo "Health check passed!"
                break
              fi
              if [ $i -eq 5 ]; then
                echo "Health check failed after 5 attempts, rolling back..."
                if [ -f docker-compose.prod.yml.backup ]; then
                  mv docker-compose.prod.yml.backup docker-compose.prod.yml
                  docker compose -f docker-compose.prod.yml up -d --remove-orphans
                fi
                exit 1
              fi
              echo "Health check attempt $i failed, retrying in 10s..."
              sleep 10
            done
            
            echo "Cleaning up..."
            echo "Current images before cleanup:"
            docker images | grep letsgo
            docker image prune -f --filter "until=24h"
            rm -f docker-compose.prod.yml.backup current_images.txt
            
            echo "Deployment success!"