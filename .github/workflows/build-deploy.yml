name: Build and Deploy

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_NAME }}
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Set version tag
        id: tag
        run: echo "version=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_NAME }}/letsgo-frontend:${{ steps.tag.outputs.version }}
            ${{ secrets.DOCKERHUB_NAME }}/letsgo-frontend:latest

      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_NAME }}/letsgo-backend:${{ steps.tag.outputs.version }}
            ${{ secrets.DOCKERHUB_NAME }}/letsgo-backend:latest

      - name: Save version
        run: echo "${{ steps.tag.outputs.version }}" > version.txt

      - name: Upload version
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt

  deploy:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download version
        uses: actions/download-artifact@v4
        with:
          name: version
          path: .

      - name: Deploy to Digital Ocean
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          command_timeout: "10m"
          script: |
            #!/bin/bash
            set -e
            echo "Starting deployment..."
            
            # Check disk space
            if [ $(df -h / | awk 'NR==2 {print $5}' | sed 's/%//') -gt 90 ]; then
              echo "❌ Low disk space, aborting deployment"
              exit 1
            fi
            
            cd /root/git/server || { echo "❌ Directory does not exist"; exit 1; }
            
            echo "Pulling changes..."
            git pull || { echo "❌ Git pull failed"; exit 1; }
            
            echo "Setting envs..."
            if [ ! -f .env ]; then
              echo "❌ .env not found"
              exit 1
            fi

            # Update to new tag
            sed -i '/^TAG=/d' .env
            echo "TAG=$(cat version.txt)" >> .env
            
            echo "Cleaning up old deployment..."
            docker compose -f docker-compose.prod.yml down --remove-orphans
            
            echo "Pulling images..."
            docker compose -f docker-compose.prod.yml pull || { echo "❌ Docker compose pull failed"; exit 1; }
            
            echo "Docker composing..."
            docker compose -f docker-compose.prod.yml up -d --remove-orphans || { 
              echo "❌ Deployment failed"
              if ! grep -q "^LAST_WORKING_TAG=" .env; then
                echo "⚠️ No last working version"
                exit 1
              fi
              LAST_WORKING=$(grep "^LAST_WORKING_TAG=" .env | cut -d'=' -f2)
              echo "Rolling back to last working version: $LAST_WORKING"
              git checkout $LAST_WORKING
              sed -i "s/^TAG=.*/TAG=$LAST_WORKING/" .env
              docker compose -f docker-compose.prod.yml up -d --remove-orphans
              exit 1
            }
            
            echo "Performing health check..."
            for i in {1..5}; do
              if curl -f http://localhost/health && curl -f http://localhost/api/health; then
                echo "Health check passed!"
                break
              fi
              if [ $i -eq 5 ]; then
                echo "Health check failed after 5 attempts"
                if ! grep -q "^LAST_WORKING_TAG=" .env; then
                  echo "⚠️ No last working version"
                  exit 1
                fi
                LAST_WORKING=$(grep "^LAST_WORKING_TAG=" .env | cut -d'=' -f2)
                echo "Rolling back to last working version: $LAST_WORKING"
                git checkout $LAST_WORKING
                sed -i "s/^TAG=.*/TAG=$LAST_WORKING/" .env
                docker compose -f docker-compose.prod.yml up -d --remove-orphans
                exit 1
              fi
              echo "Health check attempt $i failed, retrying in 10s..."
              sleep 10
            done
            
            echo "Cleaning up..."
            docker image prune -f --filter "until=24h"
            
            CURRENT_TAG=$(grep "^TAG=" .env | cut -d'=' -f2)
            sed -i "s/^LAST_WORKING_TAG=.*/LAST_WORKING_TAG=$CURRENT_TAG/" .env
            
            echo "Deployment success!"