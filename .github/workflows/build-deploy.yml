name: Build and Deploy

on:
  push:
    branches: [ feature/cicd ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_NAME }}
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Set version tag
        id: tag
        run: echo "version=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build and push frontend
        run: |
          IMG=${{ secrets.DOCKERHUB_NAME }}/letsgo-frontend
          TAG=${{ steps.tag.outputs.version }}
          docker build -t $IMG:$TAG -f frontend/Dockerfile frontend
          docker push $IMG:$TAG

      - name: Build and push backend
        run: |
          IMG=${{ secrets.DOCKERHUB_NAME }}/letsgo-backend
          TAG=${{ steps.tag.outputs.version }}
          docker build -t $IMG:$TAG -f backend/Dockerfile backend
          docker push $IMG:$TAG

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to Digital Ocean
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            set -e
            echo "Starting deployment..."
            
            # Backup current deployment
            cd /root/git/server || { echo "Directory does not exist"; exit 1; }
            if [ -f docker-compose.prod.yml ]; then
              cp docker-compose.prod.yml docker-compose.prod.yml.backup
              # Save current image versions
              docker compose -f docker-compose.prod.yml config | grep "image:" | awk '{print $2}' > current_images.txt
            fi
            
            # Pull latest changes
            git pull origin feature/cicd || { echo "Git pull failed"; exit 1; }
            
            # Get the current commit SHA
            CURRENT_SHA=$(git rev-parse --short HEAD)
            
            # Update .env with the new TAG, replacing any existing TAG line
            if [ -f .env ]; then
              sed -i '/^TAG=/d' .env
            fi
            echo "TAG=$CURRENT_SHA" >> .env
            
            # Pull new images
            docker compose -f docker-compose.prod.yml pull || { echo "Docker compose pull failed"; exit 1; }
            
            # Deploy new version
            docker compose -f docker-compose.prod.yml up -d --remove-orphans || { 
              echo "Deployment failed, rolling back..."
              if [ -f docker-compose.prod.yml.backup ]; then
                # Restore previous compose file
                mv docker-compose.prod.yml.backup docker-compose.prod.yml
                # Restore previous image versions
                if [ -f current_images.txt ]; then
                  while read -r image; do
                    docker pull "$image" || echo "Warning: Could not pull $image"
                  done < current_images.txt
                fi
                docker compose -f docker-compose.prod.yml up -d --remove-orphans
              fi
              exit 1
            }
            
            # Health check
            echo "Performing health check..."
            sleep 10  # Give services time to start
            if ! curl -f http://localhost/health || ! curl -f http://localhost/api/health; then
              echo "Health check failed, rolling back..."
              if [ -f docker-compose.prod.yml.backup ]; then
                # Restore previous compose file
                mv docker-compose.prod.yml.backup docker-compose.prod.yml
                # Restore previous image versions
                if [ -f current_images.txt ]; then
                  while read -r image; do
                    docker pull "$image" || echo "Warning: Could not pull $image"
                  done < current_images.txt
                fi
                docker compose -f docker-compose.prod.yml up -d --remove-orphans
              fi
              exit 1
            fi
            
            # Cleanup old images (keep last 5 versions)
            echo "Cleaning up old images..."
            docker image prune -f --filter "until=24h"
            
            # Remove backup files
            rm -f docker-compose.prod.yml.backup current_images.txt
            
            echo "Deployment completed successfully!"